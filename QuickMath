from random import randint
from random import uniform
from random import choice
from time import perf_counter
from numpy import mean

try:
    randint(0, 2)
    choice([0, 1])
    uniform(0, 1)
    mean([0, 1])
except NameError:
    print('You need to download the random and numpy modules to use this program.')
    exit()


class Tutor(object):
    def __init__(self, questions, digits):
        self.digits = digits
        self.questions = questions
        self.responses = list()
        self.question_types = ['Add', 'Sub', 'Mult', 'Div', 'Pct Of']
        self.practice()
        self.review()

    def create_question(self, q_type):

        x, y = sorted([randint(2, int('9' * self.digits)) for _ in range(2)], reverse=True)

        start_time = perf_counter()

        print('What is', end=' ')

        if q_type == 'Add':
            user_answer = input(f'{x} + {y}? ')
            correct_answer = x + y
        elif q_type == 'Sub':
            user_answer = input(f'{x} - {y}? ')
            correct_answer = x - y
        elif q_type == 'Mult':
            user_answer = input(f'{x} * {y}? ')
            correct_answer = x * y
        elif q_type == 'Div':
            user_answer = input(f'{x} / {y}? ')
            correct_answer = x / y
        else:
            y = round(uniform(0.01, 2), 2)
            user_answer = input(f'{y * 100}% of {x}? ')
            correct_answer = x * y

        user_answer = round(float(user_answer), 2)

        response = {'Type': q_type, 'User Input': user_answer, 'Correct Answer': correct_answer,
                    'Seconds': round(perf_counter() - start_time, 2),
                    'Over/Under': round(user_answer - correct_answer, 2)}

        self.responses.append(response)

    def practice(self):
        for i in range(self.questions):
            print(f'Question {i + 1}', end=': ')
            self.create_question(choice(self.question_types))
        print()

    def review(self):
        for i in self.responses:
            for j in i:
                print(f'{j}: {i[j]}')
            print()


Tutor(5, 2)
